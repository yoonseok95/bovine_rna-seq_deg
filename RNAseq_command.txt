1. Reads quality control

1) Starting with data
$ cd /home/biolab302/jiyeon/fastp_input
$ gunzip *.fq.gz

2) Details on the FASTQ format
******************************************************************************************************
$ cat sample_2_1.fq | head -10
******************************************************************************************************
@A00930:399:HNGWKDSX5:4:1101:3134:1000 1:N:0:TATCGCAC+ACACTAAG
NCATGTTATCTGCATAAACAGCCCCCCTGTAAATGNNNGGATGGGAAACATCAATGTTGTCGGCACCTAAAATCCGTTCCCGAACAATGAGGCCTTCCATATGAAGAGCATCTCTGTCTTGCCGAATGGATTCCAGTTCCTGAGGATTTCT
+
#FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF###FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFF:FFFFFFFF:FFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFF:FFFF
@A00930:399:HNGWKDSX5:4:1101:4381:1000 1:N:0:TATCGCAC+ACACTAAG
NCTGGTACTCGCGCAGGTGGCGGGCCATCTCATCCNNNAGGTGTCGGATCTCCTCCTCCAGGCGGGCAATGTTGTCCTGGTAGCCGCTGGCCTCACTAGCAAAGCGGTCCTCTAGCTCCCTCATCTGCCTCATCAGTGAGTCGTTGGTGCC
+
#:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF###FFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFF:FFF:F:FFFF:FFFFFFFF,FFFFFFFFF::FFFFFFFFFFFFF:FFFFFFF:FFFF:FFF,FFF,F
@A00930:399:HNGWKDSX5:4:1101:5068:1000 1:N:0:TATCGCAC+ACACTAAG
NTACTCTGCTGTCTCTTGTTTGCTGTGATGTGCTANNNGGTAGTAAAATACTAGAAAAACATACACGGCCTACTATTCTTAATTAAATAGCTCTTTTTCCCCCTAAATATGTGATTTTAGTTTTACAAGATACATATAAATAACAGAAATA
******************************************************************************************************

##fastp : ##check before/after fastqc output out 

$ for infile in *_1.fq; do base=$(basename ${infile} _1.fq); echo ${base}_1.fq; done
$ for infile in *_1.fq; do base=$(basename ${infile} _1.fq); fastp -i ${base}_1.fq -I ${base}_2.fq -o /home/biolab302/jiyeon/${base}_trimmed_1.fastq -O /home/biolab302/jiyeon/${base}_trimmed_2.fastq --detect_adapter_for_pe --overrepresentation_analysis --correction --cut_right --thread 12 --html /home/biolab302/jiyeon/${base}_trimmed.fastp.html --json /home/biolab302/jiyeon/${base}_trimmed.fastp.json; done

******************************************************************************************************
Detecting adapter sequence for read1...
>Nextera_LMP_Read1_External_Adapter | >Illumina Multiplexing Index Sequencing Primer
GATCGGAAGAGCACACGTCTGAACTCCAGTCAC

Detecting adapter sequence for read2...
>Illumina TruSeq Adapter Read 2
AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT

Read1 before filtering:
total reads: 21345596
total bases: 3223184996
Q20 bases: 3147271285(97.6448%)
Q30 bases: 3012632173(93.4676%)

Read2 before filtering:
total reads: 21345596
total bases: 3223184996
Q20 bases: 2750699422(85.341%)
Q30 bases: 2532455613(78.57%)

Read1 after filtering:
total reads: 16184201
total bases: 2333475288
Q20 bases: 2302141683(98.6572%)
Q30 bases: 2218265701(95.0627%)

Read2 aftering filtering:
total reads: 16184201
total bases: 2314131079
Q20 bases: 2280533194(98.5481%)
Q30 bases: 2195784233(94.8859%)

Filtering result:
reads passed filter: 32368402
reads failed due to low quality: 70006
reads failed due to too many N: 6
reads failed due to too short: 10252778
reads with adapter trimmed: 4187291
bases trimmed due to adapters: 119804734
reads corrected by overlap analysis: 1446399
bases corrected by overlap analysis: 1949599

Duplication rate: 6.90272%

Insert size peak (evaluated by paired-end reads): 0

JSON report: /home/biolab302/이지연/mRNA/sample_2_trimmed.fastp.json
HTML report: /home/biolab302/이지연/mRNA/

fastp -i sample_2_1.fq -I sample_2_2.fq -o /home/biolab302/이지연/mRNA/sample_2_trimmed_1.fastq -O /home/biolab302/이지연/mRNA/ sample_2_trimmed_2.fastq --detect_adapter_for_pe --overrepresentation_analysis --correction --cut_right --thread 12 --html /home/biolab302/이지연/mRNA/ sample_2_trimmed.fastp.html --json /home/biolab302/이지연/mRNA/sample_2_trimmed.fastp.json 
fastp v0.20.1, time used: 190 seconds
******************************************************************************************************
mkdir fastq_results/
$ mv *.html /home/biolab302/jiyeon/fastp_results
$ mv *.json /home/biolab302/jiyeon/fastp_results

******************************************************************************************************
3) miRNA의 경우 Cutadpat 진행하여 trimmed_1.fastq 파일의 adapter 제거, mRNA data는 skip할 것.
[miRNA cutadapt log file] 참고
1. Illumina 홈페이지에서 trimming sequence 다운
https://support.illumina.com/downloads/illumina-adapter-sequences-document-1000000002694.html
TruSeq Small RNA>Adapter Trimming
"TGGAATTCTCGGGTGCCAAGG"
----------------------------------------------------------------------------------------------------------------
2. Starting with data
$ cd /home/biolab302/jiyeon

trimmed_1.fastq를 cutadapt의 input파일로 구분하기 위해 rename함수로 이름 일괄 변경
$ rename 's/trimmed_1.fastq/cutinput_1.fastq/' *


----------------------------------------------------------------------------------------------------------------
3. read 1에서 TruSeq indexed adapter 및 이후의 서열을 제거.
cutadapt -a [sequence] -o output.fastq.gz input.fastq.gz
----------------------------------------------------------------------------------------------------------------------
$ cutadapt -a TGGAATTCTCGGGTGCCAAGG -o sample_2nd_2_small_trimmed_1.fastq sample_2nd_2_small_cutinput_1.fastq


This is cutadapt 3.5 with Python 3.10.6
Command line parameters: -a TGGAATTCTCGGGTGCCAAGG -o sample_2nd_2_small_trimmed.1.fastq sample_2nd_2_small_cutinput_1.fastq
Processing reads on 1 core in single-end mode ...
Done           00:00:40     6,919,519 reads @   5.9 µs/read;  10.21 M reads/minute
Finished in 40.67 s (6 µs/read; 10.21 M reads/minute).

=== Summary ===

Total reads processed:               6,919,519
Reads with adapters:                 6,641,310 (96.0%)
Reads written (passing filters):     6,919,519 (100.0%)

Total basepairs processed:   458,185,266 bp
Total written (filtered):    148,203,093 bp (32.3%)

=== Adapter 1 ===

Sequence: TGGAATTCTCGGGTGCCAAGG; Type: regular 3'; Length: 21; Trimmed: 6641310 times

Minimum overlap: 3
No. of allowed errors:
1-9 bp: 0; 10-19 bp: 1; 20-21 bp: 2

Bases preceding removed adapters:
  A: 14.7%
  C: 13.1%
  G: 64.4%
  T: 7.8%
  none/other: 0.0%

Overview of removed sequences
length	count	expect	max.err	error counts
3	69539	108117.5	0	69539
4	1369	27029.4	0	1369
5	4751	6757.3	0	4751
6	2029	1689.3	0	2029
7	9977	422.3	0	9977
8	3324	105.6	0	3324
9	9316	26.4	0	9306 10
10	11139	6.6	1	10700 439
11	5284	1.6	1	5063 221
12	2948	0.4	1	2726 222
13	843	0.1	1	743 100
14	1717	0.0	1	1446 271
15	447	0.0	1	353 94
16	331	0.0	1	289 42
17	1958	0.0	1	1706 252
18	571	0.0	1	484 87
19	1789	0.0	1	1385 404
20	513	0.0	2	387 97 29
21	1010	0.0	2	670 280 60
22	544	0.0	2	422 101 21
23	3283	0.0	2	2183 891 209
24	1038	0.0	2	754 234 50
25	1366	0.0	2	1006 287 73
26	825	0.0	2	670 129 26
27	1879	0.0	2	1359 447 73
28	1645	0.0	2	1235 335 75
29	193	0.0	2	148 38 7
30	233	0.0	2	157 68 8
31	2849	0.0	2	2343 463 43
32	722	0.0	2	511 177 34
33	3716	0.0	2	3034 617 65
34	3736	0.0	2	2973 654 109
35	2004	0.0	2	1574 365 65
36	1176	0.0	2	1008 149 19
37	1421	0.0	2	1180 195 46
38	8906	0.0	2	7547 1223 136
39	4980	0.0	2	4478 460 42
40	34853	0.0	2	32515 2151 187
41	36577	0.0	2	32116 4167 294
42	547712	0.0	2	536153 11152 407
43	100381	0.0	2	97051 2999 331
44	23058	0.0	2	17722 5193 143
45	1680414	0.0	2	1655724 24403 287
46	267866	0.0	2	261733 5855 278
47	148021	0.0	2	140105 7720 196
48	1814208	0.0	2	1787070 26858 280
49	468061	0.0	2	460708 7227 126
50	13642	0.0	2	12420 1139 83
51	229742	0.0	2	224881 4769 92
52	617757	0.0	2	609266 8423 68
53	211596	0.0	2	208334 3239 23
54	83156	0.0	2	81832 1302 22
55	8824	0.0	2	8369 451 4
56	110160	0.0	2	108604 1541 15
57	7526	0.0	2	7351 169 6
58	1090	0.0	2	1017 69 4
59	18659	0.0	2	18384 271 4
60	3972	0.0	2	3899 73
61	284	0.0	2	272 12
62	1736	0.0	2	1703 33
63	159	0.0	2	154 4 1
64	213	0.0	2	203 10
65	2273	0.0	2	2237 34 2
66	2031	0.0	2	1954 74 3
67	22179	0.0	2	21833 343 3
68	9189	0.0	2	9024 165
69	5522	0.0	2	5446 76
70	1022	0.0	2	1000 21 1
71	7	0.0	2	7
72	4	0.0	2	4
73	5	0.0	2	5
74	1	0.0	2	1
75	1	0.0	2	1
76	2	0.0	2	2
79	1	0.0	2	1
92	1	0.0	2	1
93	5	0.0	2	5
95	5	0.0	2	5
96	1	0.0	2	1
97	1	0.0	2	1
98	3	0.0	2	3
99	4	0.0	2	4
100	5	0.0	2	5
101	4	0.0	2	4
102	3	0.0	2	3
103	1	0.0	2	1
104	1	0.0	2	1
114	1	0.0	2	1

----------------------------------------------------------------------------------------------
4. cutadapt 전 후 read 수 동일한지 확인

$ echo $(cat sample_2nd_2_small_cutinput_1.fastq|wc -l)/4|bc
6919519

$ echo $(cat sample_2nd_2_small_trimmed_1.fastq|wc -l)/4|bc
6919519

----------------------------------------------------------------------------------------------
5. cutadapt input file들 따로 빼두기
mkdir cutadapt_input/
mv *cutinput_1.fastq /home/biolab302/jiyeon/cutadapt_input
 
******************************************************************************************************
4) Viewing the FastQC results #check fastqc_html file out
$ mkdir fastqc_results/
$ fastqc -o /home/biolab302/jiyeon/fastqc_results/ *.fastq

Started analysis of sample_2_trimmed_1.fastq
Approx 5% complete for sample_2_trimmed_1.fastq
Approx 10% complete for sample_2_trimmed_1.fastq
Approx 15% complete for sample_2_trimmed_1.fastq
Approx 20% complete for sample_2_trimmed_1.fastq
Approx 25% complete for sample_2_trimmed_1.fastq
Approx 30% complete for sample_2_trimmed_1.fastq
Approx 35% complete for sample_2_trimmed_1.fastq
Approx 40% complete for sample_2_trimmed_1.fastq
Approx 45% complete for sample_2_trimmed_1.fastq
Approx 50% complete for sample_2_trimmed_1.fastq
Approx 55% complete for sample_2_trimmed_1.fastq
Approx 60% complete for sample_2_trimmed_1.fastq
Approx 65% complete for sample_2_trimmed_1.fastq
Approx 70% complete for sample_2_trimmed_1.fastq
Approx 75% complete for sample_2_trimmed_1.fastq
Approx 80% complete for sample_2_trimmed_1.fastq
Approx 85% complete for sample_2_trimmed_1.fastq
Approx 90% complete for sample_2_trimmed_1.fastq
Approx 95% complete for sample_2_trimmed_1.fastq
Analysis complete for sample_2_trimmed_1.fastq
Started analysis of sample_2_trimmed_2.fastq
Approx 5% complete for sample_2_trimmed_2.fastq
Approx 10% complete for sample_2_trimmed_2.fastq
Approx 15% complete for sample_2_trimmed_2.fastq
Approx 20% complete for sample_2_trimmed_2.fastq
Approx 25% complete for sample_2_trimmed_2.fastq
Approx 30% complete for sample_2_trimmed_2.fastq
Approx 35% complete for sample_2_trimmed_2.fastq
Approx 40% complete for sample_2_trimmed_2.fastq
Approx 45% complete for sample_2_trimmed_2.fastq
Approx 50% complete for sample_2_trimmed_2.fastq
Approx 55% complete for sample_2_trimmed_2.fastq
Approx 60% complete for sample_2_trimmed_2.fastq
Approx 65% complete for sample_2_trimmed_2.fastq
Approx 70% complete for sample_2_trimmed_2.fastq
Approx 75% complete for sample_2_trimmed_2.fastq
Approx 80% complete for sample_2_trimmed_2.fastq
Approx 85% complete for sample_2_trimmed_2.fastq
Approx 90% complete for sample_2_trimmed_2.fastq
Approx 95% complete for sample_2_trimmed_2.fastq
Analysis complete for sample_2_trimmed_2.fastq


6. STAR
6-1) Building the STAR index
-------------------------------------------------------------------------------------------------
$ cd ncbi_dataset

$ STAR --runThreadN 12 --runMode genomeGenerate --genomeDir /home/biolab302/바탕화면/jiyeon/ncbi_dataset --genomeFastaFiles GCF_002263795.2_ARS-UCD1.3_genomic.fna --sjdbGTFfile genomic.gff --sjdbGTFtagExonParentTranscript Parent --sjdbOverhang 149
 
	/usr/lib/rna-star/bin/STAR-avx2 --runThreadN 12 --runMode genomeGenerate --genomeDir /home/biolab302/바탕화면/jiyeon/ncbi_dataset --genomeFastaFiles GCF_002263795.2_ARS-UCD1.3_genomic.fna --sjdbGTFfile genomic.gff --sjdbGTFtagExonParentTranscript Parent --sjdbOverhang 149
	STAR version: 2.7.10a   compiled: 2022-01-16T16:35:44+00:00 <place not set in Debian package>
Sep 26 21:16:52 ..... started STAR run
Sep 26 21:16:52 ... starting to generate Genome files
Sep 26 21:17:25 ..... processing annotations GTF
Sep 26 21:17:44 ... starting to sort Suffix Array. This may take a long time...
Sep 26 21:17:55 ... sorting Suffix Array chunks and saving them to disk...
Sep 26 22:43:28 ... loading chunks from disk, packing SA...
Sep 26 22:44:22 ... finished generating suffix array
Sep 26 22:44:22 ... generating Suffix Array index
Sep 26 22:47:37 ... completed Suffix Array index
Sep 26 22:47:38 ..... inserting junctions into the genome indices
Sep 26 22:58:04 ... writing Genome to disk ...
Sep 26 22:58:06 ... writing Suffix Array to disk ...
Sep 26 22:58:24 ... writing SAindex to disk
Sep 26 22:58:26 ..... finished successfully


-------------------------------------------------------------------------------------------------
6-2) Mapping trimmed_fastq file to the UCD1.3 reference genome using STAR Aligner
#fastq 파일이 있는 폴더로 이동
$ cd 'trimmed data'
$ for infile in *_1.fastq; do base=$(basename ${infile} _trimmed_1.fastq); echo ${base}; done 
sample_2nd_12
sample_2nd_16
sample_2nd_18
sample_2nd_19
sample_2nd_2
sample_2nd_8
sample_3rd_14
sample_3rd_16
sample_3rd_17
sample_3rd_20
sample_3rd_4
sample_3rd_6
sample_3rd_7
sample_3rd_8
sample_4th_14
sample_4th_15
sample_4th_17
sample_5th_10
sample_5th_19
sample_5th_9
 

#option1. fastq파일 STAR align하기
$ for infile in *_1.fastq; do base=$(basename ${infile} _trimmed_1.fastq); STAR --runThreadN 12 --genomeDir /home/biolab302/바탕화면/jiyeon/ncbi_dataset --sjdbGTFfile /home/biolab302/바탕화면/jiyeon/ncbi_dataset/genomic.gff --readFilesIn ${base}_trimmed_1.fastq ${base}_trimmed_2.fastq --twopassMode Basic --outFileNamePrefix /home/biolab302/바탕화면/jiyeon/analysis_file/ucd1.3_star_mapping/${base}_ucd1.3_star_ --outSAMtype BAM SortedByCoordinate; done

#option2. gzip파일 STAR align하기
$ for infile in *_1.fastq; do base=$(basename ${infile} _trimmed_1.fastq); STAR --runThreadN 12 --genomeDir /home/biolab302/바탕화면/jiyeon/ncbi_dataset --sjdbGTFfile /home/biolab302/바탕화면/jiyeon/ncbi_dataset/genomic.gff --readFilesIn ${base}_trimmed_1.fastq ${base}_trimmed_2.fastq --twopassMode Basic --outFileNamePrefix /home/biolab302/바탕화면/jiyeon/analysis_file/ucd1.3_star_mapping/${base}_ucd1.3_star_ --outSAMtype BAM SortedByCoordinate --readFilesCommand zcat; done

	STAR version: 2.7.10a   compiled: 2022-01-16T16:35:44+00:00 <place not set in Debian package>
Sep 28 00:01:53 ..... started STAR run
Sep 28 00:01:53 ..... loading genome
Sep 28 00:02:10 ..... processing annotations GTF
Sep 28 00:02:17 ..... inserting junctions into the genome indices
Sep 28 00:03:16 ..... started 1st pass mapping
Sep 28 00:11:19 ..... finished 1st pass mapping
Sep 28 00:11:19 ..... inserting junctions into the genome indices
Sep 28 00:13:49 ..... started mapping
Sep 28 00:28:11 ..... finished mapping
Sep 28 00:28:15 ..... started sorting BAM
Sep 28 00:29:40 ..... finished successfully



$ cat ucd1.3_star_mapping_L_5th_19_ucd1.3_star_Log.final.out
                                 Started job on |	Sep 27 22:42:21
                             Started mapping on |	Sep 27 23:08:32
                                    Finished on |	Sep 28 00:01:50
       Mapping speed, Million of reads per hour |	33.55

                          Number of input reads |	29800885
                      Average input read length |	277
                                    UNIQUE READS:
                   Uniquely mapped reads number |	28807239
                        Uniquely mapped reads % |	96.67%
                          Average mapped length |	277.27
                       Number of splices: Total |	39497223
            Number of splices: Annotated (sjdb) |	39477722
                       Number of splices: GT/AG |	39118311
                       Number of splices: GC/AG |	318824
                       Number of splices: AT/AC |	13506
               Number of splices: Non-canonical |	46582
                      Mismatch rate per base, % |	0.10%
                         Deletion rate per base |	0.01%
                        Deletion average length |	1.70
                        Insertion rate per base |	0.00%
                       Insertion average length |	1.51
                             MULTI-MAPPING READS:
        Number of reads mapped to multiple loci |	649843
             % of reads mapped to multiple loci |	2.18%
        Number of reads mapped to too many loci |	9012
             % of reads mapped to too many loci |	0.03%
                                  UNMAPPED READS:
  Number of reads unmapped: too many mismatches |	0
       % of reads unmapped: too many mismatches |	0.00%
            Number of reads unmapped: too short |	260653
                 % of reads unmapped: too short |	0.87%
                Number of reads unmapped: other |	74138
                     % of reads unmapped: other |	0.25%
                                  CHIMERIC READS:
                       Number of chimeric reads |	0
                            % of chimeric reads |	0.00%

-------------------------------------------------------------------------------------------------
# view first few alignment of BAM files
$ samtools view ucd1.3_star_mapping_L_5th_19_ucd1.3_star_Aligned.sortedByCoord.out.bam|more

A01944:91:HTKKHDSX5:4:1561:31376:34601	419	NC_037328.1	350222	0	137M	=	350222	1
37	GTTGACTCATTGGAAAAGACTCTGATGCTGGGAGGGATTGGGGGCAGAAGGAGAAGGGGACGACAGAGGATGAGATGGCTGGATGGCATCACTGACT
CGATGGATGTGAGTCTGGGTGAACTCCAGGAGTTGGTGAT	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFF:FFFFFFF	NH:i:5	HI:i:4	A
S:i:268	nM:i:2
A01944:91:HTKKHDSX5:4:1561:31376:34601	339	NC_037328.1	350222	0	137M	=	350222	-
137	GTTGACTCATTGGAAAAGACTCTGATGCTGGGAGGGATTGGGGGCAGAAGGAGAAGGGGACGACAGAGGATGAGATGGCTGGATGGCATCACTGACT
CGATGGATGTGAGTCTGGGTGAACTCCAGGAGTTGGTGAT	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	NH:i:5	HI:i:4	A
S:i:268	nM:i:2
A01944:91:HTKKHDSX5:4:1226:17580:16532	163	NC_037328.1	446272	255	120M	=	446272	1
20	CCAAAAGAAAGCAGGAGTAGCAATACTCATATCAGATAAAATAGACTTTAAAATAAAGGCTGTGAAAAGAGACAAAGAAGGAGACTACATAATGACC
AATGGATCAATCCAAGAAGATGA	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFF,FFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	NH:i:1	HI:i:1	AS:i:226	nM:i:6
A01944:91:HTKKHDSX5:4:1226:17580:16532	83	NC_037328.1	446272	255	120M	=	446272	-
120	CCAAAAGAAAGCAGGAGTAGCAATACTCATATCAGATAAAATAGACTTTAAAATAAAGGCTGTGAAAAGAGACAAAGAAGGAGACTACATAATGACC
AATGGATCAATCCAAGAAGATGA	FFFFFF:FFFFFFFFFFFFF:FFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	NH:i:1	HI:i:1	AS:i:226	nM:i:6
A01944:91:HTKKHDSX5:4:2276:1660:16611	163	NC_037328.1	446272	255	120M	=	446272	1
20	CCAAAAGAAAGCAGGAGTAGCAATACTCATATCAGATAAAATAGACTTTAAAATAAAGGCTGTGAAAAGAGACAAAGAAGGAGACTACATAATGACC
AATGGATCAATCCAAGAAGATGA	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	NH:i:1	HI:i:1	AS:i:226	nM:i:6

-------------------------------------------------------------------------------------------------
6-3) Re-buliding genome index using SJ.out_filtered.tab file
-. Filtering file with splice junction

$ cd ucd1.3_star_mapping
$ for infile in *_SJ.out.tab; do base=$(basename ${infile} _SJ.out.tab); echo ${base}; done

hw_H_2nd_12_ucd1.3_star
hw_H_2nd_16_ucd1.3_star
hw_H_2nd_2_ucd1.3_star
hw_H_2nd_8_ucd1.3_star
hw_H_3rd_14_ucd1.3_star
hw_H_3rd_16_ucd1.3_star
hw_H_3rd_17_ucd1.3_star
hw_H_4th_14_ucd1.3_star
hw_H_5th_10_ucd1.3_star
hw_H_5th_9_ucd1.3_star
hw_L_2nd_18_ucd1.3_star
hw_L_2nd_19_ucd1.3_star
hw_L_3rd_20_ucd1.3_star
hw_L_3rd_4_ucd1.3_star
hw_L_3rd_6_ucd1.3_star
hw_L_3rd_7_ucd1.3_star
hw_L_3rd_8_ucd1.3_star
hw_L_4th_15_ucd1.3_star
hw_L_4th_17_ucd1.3_star
hw_L_5th_19_ucd1.3_star


$ cat hw_L_5th_19_ucd1.3_star_SJ.out.tab|more

$ for infile in *_SJ.out.tab; do base=$(basename ${infile} _SJ.out.tab); cat ${base}_SJ.out.tab | awk '($5 > 0 && $7 > 2 && $6==0)' | cut -f1-6 | sort | uniq > ${base}_SJ.out_filtered.tab; done

Before using splice junctions, you should filter out the likely false positives splice junctions such as junctions supported by very few reads (e.g. ≤ 2 reads), non-canonical junctions (The 0 value in column5 from SJ.out.tab denotes non-canonical junctions), and annotated junctions (The 1 value in column6 from SJ.out.tab denotes annotated junctions). The annotated junctions should be filtered out as they are already included in the gene annotation (GTF/GFF3 file).


$ cat hw_L_5th_19_ucd1.3_star_SJ.out_filtered.tab|more
NC_037330.1	21365484	21366057	1	1	0
NC_037331.1	93296445	93296783	1	1	0
NC_037345.1	55476154	55476276	1	1	0
NC_037345.1	55476154	55476396	1	1	0
NC_037346.1	35768088	35768351	1	1	0
NC_037350.1	25118710	25119536	2	2	0
NC_037350.1	27873034	28056054	1	1	0
-------------------------------------------------------------------------------------------------
$ cat *.tab | awk '($5 > 0 && $7 > 2 && $6==0)' | cut -f1-6 | sort | uniq > hw_highlow_SJ.out_filtered.tab



-. Build genome index with filtered output  
$ cd jiyeon/ncbi_dataset/data/GCF_002263795.2
$ STAR --runThreadN 12 --runMode genomeGenerate --genomeDir /home/biolab302/바탕화면/jiyeon/analysis_file/star_index_filtering_2pass --genomeFastaFiles GCF_002263795.2_ARS-UCD1.3_genomic.fna --sjdbGTFfile genomic.gff --sjdbFileChrStartEnd /home/biolab302/바탕화면/jiyeon/analysis_file/ucd1.3_star_mapping/hw_highlow_SJ.out_filtered.tab --sjdbOverhang 149


	STAR version: 2.7.10a   compiled: 2022-01-16T16:35:44+00:00 <place not set in Debian package>
Oct 04 14:42:48 ..... started STAR run
Oct 04 14:42:48 ... starting to generate Genome files
Oct 04 14:43:21 ..... processing annotations GTF
Oct 04 14:43:40 ... starting to sort Suffix Array. This may take a long time...
Oct 04 14:43:51 ... sorting Suffix Array chunks and saving them to disk...
Oct 04 16:08:27 ... loading chunks from disk, packing SA...
Oct 04 16:09:23 ... finished generating suffix array
Oct 04 16:09:23 ... generating Suffix Array index
Oct 04 16:12:33 ... completed Suffix Array index
Oct 04 16:12:33 ..... inserting junctions into the genome indices
Oct 04 16:22:11 ... writing Genome to disk ...
Oct 04 16:22:13 ... writing Suffix Array to disk ...
Oct 04 16:22:30 ... writing SAindex to disk
Oct 04 16:22:32 ..... finished successfully


-------------------------------------------------------------------------------------------------
6-4) Mapping reads to the reference genome 2nd pass

$ cd 'trimmed data'
$ for infile in *_1.fastq; do base=$(basename ${infile} _trimmed_1.fastq); echo ${base}; done 

sample_2nd_12
sample_2nd_16
sample_2nd_18
sample_2nd_19
sample_2nd_2
sample_2nd_8
sample_3rd_14
sample_3rd_16
sample_3rd_17
sample_3rd_20
sample_3rd_4
sample_3rd_6
sample_3rd_7
sample_3rd_8
sample_4th_14
sample_4th_15
sample_4th_17
sample_5th_10
sample_5th_19
sample_5th_9

#gzip파일로 mapping
$ for infile in *_1.fastq; do base=$(basename ${infile} _trimmed_1.fastq); STAR --runThreadN 12 --readFilesIn ${base}_trimmed_1.fastq ${base}_trimmed_2.fastq --genomeDir /home/biolab302/바탕화면/jiyeon/analysis_file/star_index_filtering_2pass/ --outSAMtype BAM SortedByCoordinate --outFileNamePrefix /home/biolab302/바탕화면/jiyeon/analysis_file/ucd1.3_star_mapping/${base}_star2pass_filtered --outSAMunmapped Within --readFilesCommand zcat; done

#fastq파일로 mapping
$ for infile in *_1.fastq; do base=$(basename ${infile} _trimmed_1.fastq); STAR --runThreadN 12 --readFilesIn ${base}_trimmed_1.fastq ${base}_trimmed_2.fastq --genomeDir /home/biolab302/바탕화면/jiyeon/analysis_file/star_index_filtering_2pass/ --outSAMtype BAM SortedByCoordinate --outFileNamePrefix /home/biolab302/바탕화면/jiyeon/analysis_file/ucd1.3_star_mapping/${base}_star2pass_filtered --outSAMunmapped Within ; done

STAR version: 2.7.10a   compiled: 2022-01-16T16:35:44+00:00 <place not set in Debian package>
Oct 05 15:13:25 ..... started STAR run
Oct 05 15:13:25 ..... loading genome
Oct 05 15:13:39 ..... started mapping
Oct 05 15:21:53 ..... finished mapping
Oct 05 15:21:57 ..... started sorting BAM
Oct 05 15:23:25 ..... finished successfully

# 결과 확인
$ cat sample_5th_9_star2pass_filteredLog.final.out
                                 Started job on |	Oct 05 15:13:25
                             Started mapping on |	Oct 05 15:13:39
                                    Finished on |	Oct 05 15:23:25
       Mapping speed, Million of reads per hour |	156.97

                          Number of input reads |	25551233
                      Average input read length |	270
                                    UNIQUE READS:
                   Uniquely mapped reads number |	24627501
                        Uniquely mapped reads % |	96.38%
                          Average mapped length |	271.07
                       Number of splices: Total |	21941102
            Number of splices: Annotated (sjdb) |	21718228
                       Number of splices: GT/AG |	21771764
                       Number of splices: GC/AG |	138475
                       Number of splices: AT/AC |	9082
               Number of splices: Non-canonical |	21781
                      Mismatch rate per base, % |	0.12%
                         Deletion rate per base |	0.01%
                        Deletion average length |	1.76
                        Insertion rate per base |	0.01%
                       Insertion average length |	1.49
                             MULTI-MAPPING READS:
        Number of reads mapped to multiple loci |	466027
             % of reads mapped to multiple loci |	1.82%
        Number of reads mapped to too many loci |	30324
             % of reads mapped to too many loci |	0.12%
                                  UNMAPPED READS:
  Number of reads unmapped: too many mismatches |	0
       % of reads unmapped: too many mismatches |	0.00%
            Number of reads unmapped: too short |	384702
                 % of reads unmapped: too short |	1.51%
                Number of reads unmapped: other |	42679
                     % of reads unmapped: other |	0.17%
                                  CHIMERIC READS:
                       Number of chimeric reads |	0
                            % of chimeric reads |	0.00%




-------------------------------------------------------------------------------------------------

7. Count the read that mapped to the reference genome sequence


1) Installation of htseq-count tool
$ pip install HTseq

-------------------------------------------------------------------------------------------------
2) Indexing bam file
$ cd /home/biolab302/바탕화면/jiyeon/analysis_file
$ cd ucd1.3_star_mapping

$ for infile in *_filteredAligned.sortedByCoord.out.bam; do base=$(basename ${infile} _filteredAligned.sortedByCoord.out.bam); echo ${base}; done
hw_H_2nd_12
hw_H_2nd_16
hw_H_2nd_2
hw_H_2nd_8
hw_H_3rd_14
hw_H_3rd_16
hw_H_3rd_17
hw_H_4th_14
hw_H_5th_10
hw_H_5th_9
hw_L_2nd_18
hw_L_2nd_19
hw_L_3rd_20
hw_L_3rd_4
hw_L_3rd_6
hw_L_3rd_7
hw_L_3rd_8
hw_L_4th_15
hw_L_4th_17
hw_L_5th_19


$ for infile in *_filteredAligned.sortedByCoord.out.bam; do base=$(basename ${infile} _filteredAligned.sortedByCoord.out.bam); samtools index ${base}_filteredAligned.sortedByCoord.out.bam; done

-----------------------------------------------------------------------------------------------------------------
3) Filtering genomic.gff file
#Solution : Print all line with 'gene' word in genomic.gff file
$ cd /home/biolab302/바탕화면/jiyeon/ncbi_dataset/data/GCF_002263795.2

$ awk '/gene/' ./genomic.gff > genomic_gene.gff

$ls

GCF_002263795.2_ARS-UCD1.3_genomic.fna  genomic.gff  genomic.gtf  genomic_gene.gff


$ cat genomic_gene.gff |more

NC_037328.1	Gnomon	pseudogene	207958	209108	.	-	.	ID=gene-LOC112447009;
Dbxref=GeneID:112447009;Name=LOC112447009;gbkey=Gene;gene=LOC112447009;gene_biotype=pseudogene;pseudo
=true
NC_037328.1	Gnomon	exon	207958	208664	.	-	.	ID=id-LOC112447009;Parent=gen
e-LOC112447009;Dbxref=GeneID:112447009;gbkey=exon;gene=LOC112447009;model_evidence=Supporting evidenc
e includes similarity to: 1 Protein%2C and 94%25 coverage of the annotated genomic feature by RNAseq 
alignments;pseudo=true
NC_037328.1	Gnomon	exon	209091	209108	.	-	.	ID=id-LOC112447009-2;Parent=g
ene-LOC112447009;Dbxref=GeneID:112447009;gbkey=exon;gene=LOC112447009;model_evidence=Supporting evide
nce includes similarity to: 1 Protein%2C and 94%25 coverage of the annotated genomic feature by RNAse
q alignments;pseudo=true
NC_037328.1	Gnomon	gene	210759	214966	.	-	.	ID=gene-LOC112447072;Dbxref=G
eneID:112447072;Name=LOC112447072;gbkey=Gene;gene=LOC112447072;gene_biotype=lncRNA
NC_037328.1	Gnomon	lnc_RNA	210759	214966	.	-	.	ID=rna-XR_003035142.1;Parent=
gene-LOC112447072;Dbxref=GeneID:112447072,GenBank:XR_003035142.1;Name=XR_003035142.1;gbkey=ncRNA;gene
=LOC112447072;model_evidence=Supporting evidence includes similarity to: 2 ESTs%2C and 100%25 coverag
e of the annotated genomic feature by RNAseq alignments%2C including 4 samples with support for all a
--More--

-----------------------------------------------------------------------------------------------------------------
4) mRNA quantification Command line

$ cd /home/biolab302/바탕화면/jiyeon/analysis_file/ucd1.3_star_mapping

$ htseq-count --format bam --order pos --mode intersection-strict --stranded reverse --minaqual 1  --type exon --idattr gene --add-chromosome-info hw_H_2nd_2_filteredAligned.sortedByCoord.out.bam /home/biolab302/바탕화면/jiyeon/ncbi_dataset/data/GCF_002263795.2/genomic_gene.gff > hw_H_2nd_2_star2pass_htseq-count.tsv


$ cat hw_H_2nd_2_star2pass_htseq-count.tsv|more
20ALPHA-HSD	NC_037340.1	4
A1BG	NC_037345.1	1
A1CF	NC_037353.1	0
A2M	NC_037332.1	2513
A2ML1	NC_037332.1	5
A3GALT2	NC_037329.1	10
A4GALT	NC_037332.1	58
A4GNT	NC_037328.1	0
AAAS	NC_037332.1	85
AACS	NC_037344.1	37
AADAC	NC_037328.1	0
AADACL3	NC_037343.1	0
AADACL4	NC_037343.1	0
AADAT	NC_037335.1	67
AAED1	NC_037335.1	227
AAGAB	NC_037337.1	451
AAK1	NC_037338.1	250
--More--



$ for infile in *_filteredAligned.sortedByCoord.out.bam; do base=$(basename ${infile} _filteredAligned.sortedByCoord.out.bam); echo ${base}; done 

hw_H_2nd_12
hw_H_2nd_16
hw_H_2nd_2
hw_H_2nd_8
hw_H_3rd_14
hw_H_3rd_16
hw_H_3rd_17
hw_H_4th_14
hw_H_5th_10
hw_H_5th_9
hw_L_2nd_18
hw_L_2nd_19
hw_L_3rd_20
hw_L_3rd_4
hw_L_3rd_6
hw_L_3rd_7
hw_L_3rd_8
hw_L_4th_15
hw_L_4th_17
hw_L_5th_19

$ for infile in *_filteredAligned.sortedByCoord.out.bam; do base=$(basename ${infile} _filteredAligned.sortedByCoord.out.bam); htseq-count --format bam --order pos --mode intersection-strict --stranded reverse --minaqual 1  --type exon --idattr gene --add-chromosome-info ${base}_filteredAligned.sortedByCoord.out.bam /home/biolab302/바탕화면/jiyeon/ncbi_dataset/data/GCF_002263795.2/genomic_gene.gff > ${base}_htseq-count.tsv; done




-----------------------------------------------------------------------------------------------------------------
Counts with gtf file
$ cd /home/biolab302/바탕화면/jiyeon/analysis_file/ucd1.3_star_mapping
$ htseq-count --format bam --order pos --mode intersection-strict --stranded reverse --minaqual 1  --type exon --idattr gene_id --add-chromosome-info hw_H_2nd_2_filteredAligned.sortedByCoord.out.bam /home/biolab302/바탕화면/jiyeon/ncbi_dataset/data/GCF_002263795.2/genomic.gtf > hw_H_2nd_2_star2pass_htseq-count.tsv

$ cat hw_H_2nd_2_star2pass_htseq-count.tsv|more
20ALPHA-HSD	NC_037340.1	4
A1BG	NC_037345.1	1
A1CF	NC_037353.1	0
A2M	NC_037332.1	2513
A2ML1	NC_037332.1	5
A3GALT2	NC_037329.1	10
A4GALT	NC_037332.1	58
A4GNT	NC_037328.1	0
AAAS	NC_037332.1	85
AACS	NC_037344.1	37
AADAC	NC_037328.1	0
AADACL3	NC_037343.1	0
AADACL4	NC_037343.1	0
AADAT	NC_037335.1	67
AAED1	NC_037335.1	227
AAGAB	NC_037337.1	451
AAK1	NC_037338.1	250
--More--


##############################################
HTseq count file merge
##############################################
###I. merge 전 dataframe 정리
#1. 필요한 라이브러리 설치
install.packages("data.table")
library(data.table)

#2. tsv 파일 vector 명 수정

getwd()
setwd("E:/이지연 DEG 분석/")

# 파일 리스트 생성
rename_list <- list.files(pattern="*.tsv")

# 각 파일을 불러와서 열 이름 변경 후 다시 저장
for (file in rename_list) {
  # 파일 불러오기
  data <- read.table(file, header=FALSE, sep="\t")
  
  # 열 이름 변경
  colnames(data)[colnames(data)=="V1"] <- "gene_name"
  colnames(data)[colnames(data)=="V2"] <- "gene_id"
  colnames(data)[colnames(data)=="V3"] <- "count"
  
  # 변경된 데이터 다시 저장
  write.table(data, file, sep="\t", row.names=FALSE, quote=FALSE)
}

#3. gene_id 열 삭제
# 파일 리스트 생성
del_list <- list.files(pattern="*.tsv")

# 각 파일을 불러와서 두 번째 열 삭제 후 다시 저장
# 필요한 패키지 로드
library(data.table)
library(dplyr)

# 'del_list'에 있는 각 파일에 대해 작업 수행
for (file in del_list) {
  
  # 파일 불러오기
  data <- fread(file)
  
  # 'gene_id' 열에서 값이 빈 문자열인 행 삭제
  cleaned_data <- data %>% filter(gene_id != "")
  
  # 두 번째 열 삭제
  cleaned_data <- cleaned_data[,-2]
  
  # 변경된 데이터 다시 저장
  new_file_name <- paste0("new_", basename(file))
  fwrite(cleaned_data, new_file_name, sep="\t")
}


-----------------------------------------------------------------------------------------------
###II. R script for looping through the htseq outputs and merge them into one matrix

setwd("E:/이지연 DEG 분석/HTseq_gene_name")
getwd()
path <- "E:/이지연 DEG 분석/HTseq_gene_name/"

myoutname <- "merged_counts"

# List all files in the specified path that start with 'new_' and end with '.tsv'
files <- list.files(path=path, pattern="^new_.*\\.tsv$")

# Manipulate file names by removing 'new_' and '.tsv' from the name
labs <- gsub("new_", "", files)
labs <- gsub("\\.tsv", "", labs, perl=TRUE)

# Initialize an empty list to store the data frames
cov <- list()

# Loop through each file
for (i in labs) {
  # Construct the filepath
  filepath <- file.path(path, paste("new_", i, ".tsv", sep=""))
  
  # Read the data file into a data frame
  data <- read.table(filepath, sep = "\t", header=TRUE, stringsAsFactors=FALSE)
  
  # Aggregate data by 'gene_name', summing the values
  data <- aggregate(. ~ gene_name, data, sum)
  
  # Rename the columns of the data frame
  colnames(data) <- c("gene_name", i)
  
  # Add the data frame to the list
  cov[[i]] <- data
}

# Merge all data frames in the list into one data frame by 'gene_name'
df <- Reduce(function(x, y) merge(x = x, y = y, by ="gene_name", all = TRUE), cov)

# Write the merged data frame to a CSV file
write.csv(df, file = paste(path,"merged 24.csv", sep=""), row.names = FALSE)


##############################################
Normalization
##############################################
#I. gene length 구하기
getwd()
setwd("E:/이지연 DEG 분석/")

#paskage download
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("GenomicFeatures")
update.packages()
a
n

#first get the gtf file from, lets say, 
library(GenomicFeatures)

ncbidb <- makeTxDbFromGFF("D:/이지연 DEG 분석/ncbi_dataset/ncbi_dataset/data/GCF_002263795.2/genomic.gtf",format="gtf")
head(ncbidb)
View(ncbidb)

# then collect the exons per gene id
exons.list.per.gene <- exonsBy(ncbidb,by="gene")
head(exons.list.per.gene)
# then for each gene, reduce all the exons to a set of non overlapping exons, calculate their lengths (widths) and sum then
exonic.gene.sizes <- lapply(exons.list.per.gene,function(x){sum(width(reduce(x)))})
head(exonic.gene.sizes)
#to see them in a table format, you should unlist them
unlist_geneLength<-unlist(exonic.gene.sizes)
write.table(unlist_geneLength,"23.11.19_genelength calculation.txt")
#--------------------------------------------------------------------------------------------------------
  
#II. Normalization (TPM)
# 데이터 로드

library(data.table)

gene_lengths <- read.table("23.11.19_genelength calculation.txt", header=T, quote = "")
gene_counts <- read.csv("merged 24.csv", row.names=1, header=T)

# gene_lengths의 유전자 이름에서 따옴표 제거
row.names(gene_lengths) <- gsub("\"", "", row.names(gene_lengths))

# RPKM 계산 함수
rpkm <- function(counts, lengths) {
  rate <- counts / lengths
  rate / sum(counts) * 1e6
}

# TPM 계산 함수
tpm <- function(counts, lengths) {
  rate <- counts / lengths
  rate / sum(rate) * 1e6
}

# RPKM/TPM 계산
rpkms <- apply(gene_counts, 2, function(x) rpkm(as.numeric(x), gene_lengths))
tpms <- apply(gene_counts, 2, function(x) tpm(as.numeric(x), gene_lengths))

tpms_df <- do.call(cbind, tpms)
rpkms_df <- do.call(cbind, rpkms)

colnames(tpms_df) <- colnames(gene_counts)
colnames(rpkms_df) <- colnames(gene_counts)

write.csv(rpkms_df, "rpkm_results.csv")
write.csv(tpms_df, "tpm_results.csv")


################################################################################
#
# Course 1. Gene Expression visualization
#
################################################################################
# Step 1.1 Data load 
################################################################################


getwd()
setwd("E:/이지연 DEG 분석/")

library(dplyr)
data = read.csv("rpkm_results.csv", row.names=1)

colnames(data) # To check the column names of the data
View(data)

################################################################################
# Step 1.2 Extracting gene expression information from RPKM results.
################################################################################

# Extract method 1.

rpkm_table = data
dim(rpkm_table3)
head(rpkm_table)
summary(rpkm_table)
# Change column names(R에서 컬럼명 바꿀 것. csv파일 자체에서 수정하면 에러남)
colnames(rpkm_table)


###1
colnames(rpkm_table) <- c("H_2nd_12_9", "H_2nd_16_9", "H_2nd_2_9",  "H_2nd_8_9", 
                          "H_3rd_14_9", "H_3rd_16_8", "H_3rd_17_9", "H_4th_14_9",
                          "H_5th_10_9", "H_5th_9_9",  "L_2nd_18_4", "L_2nd_19_4",
                          "L_3rd_20_1", "L_3rd_4_2",  "L_3rd_6_3",  "L_3rd_7_3" ,
                          "L_3rd_8_2",  "L_4th_15_3", "L_4th_17_1", "L_5th_19_1",
                          "H_RNAlater_6_7",  "H_RNAlater_7_7",  "L_RNAlater_8_4",  "L_RNAlater_9_5")
colnames(rpkm_table)
View(rpkm_table)


################################################################################
# Step 1.3 Histogram
################################################################################

# When using hist(), if log(0, 2) results in "-Inf", it is excluded from the histogram.
# What number will you use to draw a histogram?
rpkm_table$H_2nd_12_9 # Checking the RPKM values
log(0.0, 2)              # Inf/-Inf (infinity) 
log(rpkm_table$H_2nd_12_9, 2) #or
log(rpkm_table$H_2nd_12_9+1, 2)

# Let's check the distribution of gene expression in one sample through historam.
par(mfrow=c(6,4)) # Setting the layout of the histograms

png("유전자발현량데이터EDA_histogramv1.png", width=10, height=8, units="in", res=600)

par(mfrow=c(6,4), mar=c(2, 2, 2, 2))
hist(log(rpkm_table$H_2nd_12_9, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_2nd_12_9")
hist(log(rpkm_table$H_2nd_16_9, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_2nd_16_9")
hist(log(rpkm_table$H_2nd_2_9, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_2nd_2_9")
hist(log(rpkm_table$H_2nd_8_9, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_2nd_8_9")
hist(log(rpkm_table$H_3rd_14_9, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_3rd_14_9")
hist(log(rpkm_table$H_3rd_16_8, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_3rd_16_8")
hist(log(rpkm_table$H_3rd_17_9, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_3rd_17_9")
hist(log(rpkm_table$H_4th_14_9, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_4th_14_9")
hist(log(rpkm_table$H_5th_10_9, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_5th_10_9")
hist(log(rpkm_table$H_5th_9_9, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_5th_9_9")
hist(log(rpkm_table$L_2nd_18_4, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_2nd_18_4")
hist(log(rpkm_table$L_2nd_19_4, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_2nd_19_4")
hist(log(rpkm_table$L_3rd_20_1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_20_1")
hist(log(rpkm_table$L_3rd_4_2, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_4_2")
hist(log(rpkm_table$L_3rd_6_3, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_6_3")
hist(log(rpkm_table$L_3rd_7_3, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_7_3")
hist(log(rpkm_table$L_3rd_8_2, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_8_2")
hist(log(rpkm_table$L_4th_15_3, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_4th_15_3")
hist(log(rpkm_table$L_4th_17_1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_4th_17_1")
hist(log(rpkm_table$L_5th_19_1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_5th_19_1")
hist(log(rpkm_table$H_RNAlater_6_7, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_RNAlater_6_7")
hist(log(rpkm_table$H_RNAlater_7_7, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_RNAlater_7_7")
hist(log(rpkm_table$L_RNAlater_8_4, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_RNAlater_8_4")
hist(log(rpkm_table$L_RNAlater_9_5, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_RNAlater_9_5")

dev.off()

png("유전자발현량데이터EDA_histogramv2.png", width=10, height=8, units="in", res=600)
par(mfrow=c(6,4), mar=c(2, 2, 2, 2))
hist(log(rpkm_table$H_2nd_12_9+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_2nd_12_9")
hist(log(rpkm_table$H_2nd_16_9+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_2nd_16_9")
hist(log(rpkm_table$H_2nd_2_9+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_2nd_2_9")
hist(log(rpkm_table$H_2nd_8_9+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_2nd_8_9")
hist(log(rpkm_table$H_3rd_14_9+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_3rd_14_9")
hist(log(rpkm_table$H_3rd_16_8+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_3rd_16_8")
hist(log(rpkm_table$H_3rd_17_9+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_3rd_17_9")
hist(log(rpkm_table$H_4th_14_9+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_4th_14_9")
hist(log(rpkm_table$H_5th_10_9+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_5th_10_9")
hist(log(rpkm_table$H_5th_9_9+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_5th_9_9")
hist(log(rpkm_table$L_2nd_18_4+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_2nd_18_4")
hist(log(rpkm_table$L_2nd_19_4+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_2nd_19_4")
hist(log(rpkm_table$L_3rd_20_1+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_20_1")
hist(log(rpkm_table$L_3rd_4_2+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_4_2")
hist(log(rpkm_table$L_3rd_6_3+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_6_3")
hist(log(rpkm_table$L_3rd_7_3+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_7_3")
hist(log(rpkm_table$L_3rd_8_2+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_3rd_8_2")
hist(log(rpkm_table$L_4th_15_3+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_4th_15_3")
hist(log(rpkm_table$L_4th_17_1+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_4th_17_1")
hist(log(rpkm_table$L_5th_19_1+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_5th_19_1")
hist(log(rpkm_table$H_RNAlater_6_7+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_RNAlater_6_7")
hist(log(rpkm_table$H_RNAlater_7_7+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "H_RNAlater_7_7")
hist(log(rpkm_table$L_RNAlater_8_4+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_RNAlater_8_4")
hist(log(rpkm_table$L_RNAlater_9_5+1, 2), breaks = 10, xlim = c(-25, 25), probability = T, main = "L_RNAlater_9_5")
dev.off()


par(mfrow=c(1,1)) # Resetting the layout to the default value of 1 row and 1 column.

################################################################################
# Step 1.4 Scatter plot
################################################################################

plot(rpkm_table$H_2nd_12_9, rpkm_table$L_3rd_20_1, col="black", pch =19)

# Let's examine the gene expression distribution between control and case samples 
# for each IMF score(H vs L) using scatter plots.

png("H_2nd_12_9 vs H_3rd_16_8.png", width=6, height=5, units="in", res=600)
plot(log(rpkm_table$H_2nd_12_9+1, 2), log(rpkm_table$H_3rd_16_8+1, 2), 
     col="royalblue", pch =19, main = "H_2nd_12_9 versus H_3rd_16_8")
dev.off()

#for문 사용하여 모든 1:1조합으로 그려보기
# 'H' 그룹과 'L' 그룹의 샘플 이름 추출
H_samples <- colnames(rpkm_table2)[grep("^H_", colnames(rpkm_table))]
L_samples <- colnames(rpkm_table2)[grep("^L_", colnames(rpkm_table))]

# 모든 H 샘플과 L 샘플의 조합에 대해 산점도 그리기
for (H_sample in H_samples) {
  for (L_sample in L_samples) {
    file_name <- paste0(H_sample, "_vs_", L_sample, ".png")
    png(file_name, width=6, height=5, units="in", res=600)
    
    # 산점도 그리기
    plot(log(rpkm_table2[[H_sample]]+1, 2), log(rpkm_table2[[L_sample]]+1, 2), 
         col="royalblue", pch =19, main = paste(H_sample, "versus", L_sample))
    
    dev.off()
  }
}

#H그룹 내 샘플 비교
# 'H' 그룹의 샘플 이름 추출
H_samples <- colnames(rpkm_table)[grep("^H_", colnames(rpkm_table))]

# 모든 H 샘플 조합에 대해 산점도 그리기
for (i in 1:(length(H_samples)-1)) {
  for (j in (i+1):length(H_samples)) {
    # 파일 이름 생성
    file_name <- paste0(H_samples[i], "_vs_", H_samples[j], ".png")
    
    # 그래프 저장 시작
    png(file_name, width=6, height=5, units="in", res=600)
    
    # 산점도 그리기
    plot(log(rpkm_table[[H_samples[i]]]+1, 2), log(rpkm_table[[H_samples[j]]]+1, 2), 
         col="royalblue", pch =19, main = paste(H_samples[i], "versus", H_samples[j]))
    
    # 그래프 저장 종료
    dev.off()
  }
}


# 'H' 그룹과 'L' 그룹의 데이터 그룹으로 묶어서 진행
H_group <- rpkm_table[, grep("^H_", colnames(rpkm_table))]
L_group <- rpkm_table[, grep("^L_", colnames(rpkm_table))]
H_group_mean <- rowMeans(log(H_group+1, 2))
L_group_mean <- rowMeans(log(L_group+1, 2))

# 산점도 그리기
png("H vs L_1.png", width=6, height=5, units="in", res=600)
plot(H_group_mean, L_group_mean, col="royalblue", pch =19, main = "High IMF group versus Low IMF group(Anseong+Yeongju)")
dev.off()



# Correlation plot with scatter plot !

png("correlation plot_1.png", width=12, height=12, units="in", res=600)
panel.cor <- function(x, y){
  usr <- par("usr"); on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  r <- round(cor(x, y), digits=2)
  txt <- paste0("R = ", r)
  cex.cor <- 0.8/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex.cor * r)
}

upper.panel<-function(x, y){
  points(x,y, pch = 19)
}

pairs(log(rpkm_table+1, 2), 
      lower.panel = panel.cor,
      upper.panel = upper.panel)
dev.off()

##Heatmap
library(ggplot2)
library(reshape2)

# 상관 계수 행렬을 계산
cor_matrix <- cor(rpkm_table)

# melt 함수를 사용하여 데이터를 재구조화
melted_cor_matrix <- melt(cor_matrix)


png("correlation plot_2.png", width=12, height=12, units="in", res=600)

ggplot(data = melted_cor_matrix, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() +
  scale_fill_gradient2(low = "royalblue", high = "red", mid = "white", 
                       midpoint = 0, limit = c(-1,1), space = "Lab", 
                       name="Pearson\nCorrelation") +
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, 
                                   size = 12, hjust = 1),
        axis.text.y = element_text(size = 12)) +
  coord_fixed()

dev.off()


################################################################################
# Step 1.5 Box plot
################################################################################

# Simple way
boxplot(log(rpkm_table, 2), col = "aquamarine")
boxplot(log(rpkm_table+1, 2), col = "pink")

png("boxplot_rpkm0.3.png", width=12, height=8, units="in", res=600)
# Select genes with an RPKM value of 0.3 or greater in at least one sample.
rpkm_filt_table <- rpkm_table[which(apply(rpkm_table, 1, max) >= 0.3),]
dim(rpkm_table)
dim(rpkm_filt_table)
head(rpkm_filt_table)
summary(rpkm_filt_table)
png("boxplot_rpkm0.3.png", width=12, height=8, units="in", res=600)
par(mar = c(10, 10, 4, 2) + 0.1)
boxplot(log(rpkm_filt_table+1, 2), col = "pink", las=2)
dev.off()



par(mar = c(2, 2, 2, 2) + 0.1)

################################################################################
# Step 1.6 MDS
################################################################################

# 2d MDS plot
t_rpkm_table <- t(rpkm_table)

group <- c(1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,2,2)
d <- dist(log(t_rpkm_table+0.1,10), method="euclidean")
fit <- cmdscale(d, eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]

png("H, L MDS plot.png", width=12, height=8, units="in", res=600)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="MDS", type="n", 
     xlim = c(-10,10), ylim = c(-10,10))
text(x, y, labels=row.names(t_rpkm_table), cex=.9, col=group)
grid()
dev.off()

# 3d MDS plot
install.packages("rgl")
library(rgl)
fit <- cmdscale(d,eig=TRUE,k=3)
x <- fit$points[,1]
y <- fit$points[,2]
z <- fit$points[,3]
plot3d(x,y,z,xlab="Coordinate 1", ylab="Coordinate 2", main="MDS", type="n")
text3d(x,y,z,texts=row.names(t_rpkm_table), cex=.7, col=group)



################################################################################
#
# DEG analysis & visualization
#
################################################################################
# Step 2.1 Data load 
################################################################################


getwd()
setwd("E:/이지연 DEG 분석/")
data = read.csv("merged 24.csv", row.names=1)
colnames(data) # To check the column names of the data



################################################################################
# Step 2.2 Extracting gene expression information from HTseq count results.
################################################################################

# Create a subset of the 'data' dataframe with only the columns corresponding to ReadCount
rc_table = data


dim(rc_table) # Print the dimensions of the resulting 'rc_table'
head(rc_table) # Print the first few rows of the 'rc_table'
summary(rc_table) # Generate summary statistics for each column of the 'rc_table'

# Change the column names of the 'rc_table' to more user-friendly names
colnames(rc_table)
colnames(rc_table) <- c("H_2nd_12_9", "H_2nd_16_9", "H_2nd_2_9",  "H_2nd_8_9", 
                        "H_3rd_14_9", "H_3rd_16_8", "H_3rd_17_9", "H_4th_14_9",
                        "H_5th_10_9", "H_5th_9_9",  "L_2nd_18_4", "L_2nd_19_4",
                        "L_3rd_20_1", "L_3rd_4_2",  "L_3rd_6_3",  "L_3rd_7_3" ,
                        "L_3rd_8_2",  "L_4th_15_3", "L_4th_17_1", "L_5th_19_1",
                        "H_RNAlater_6_7",  "H_RNAlater_7_7",  "L_RNAlater_8_4",  "L_RNAlater_9_5")
colnames(rc_table)

# Open a new tabular view of the 'rc_table'
View(rc_table)

################################################################################
# Step 2.3 DEG analysis using TCC
################################################################################

# install TCC 
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("TCC")
library(TCC)

# initiation & filter low count genes
group <- c(1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,2,2)
tcc <- new("TCC", rc_table, group)
dim(tcc$count)
tcc
tcc <- filterLowCountGenes(tcc, low.count = 10)  
dim(tcc$count)
tcc

# normalization & DEG estimation 
type <- "deseq2"
if (type == "edger"){
  tcc <- calcNormFactors(tcc, norm.method="tmm", test.method="edger",
                         iteration=3, FDR=0.1, floorPDEG=0.05)
  tcc <- estimateDE(tcc, test.method="edger", FDR=0.1)
}else if (type == "deseq2"){
  tcc <- calcNormFactors(tcc, norm.method="deseq2", test.method="deseq2",
                         iteration=3, FDR=0.1, floorPDEG=0.05)
  tcc <- estimateDE(tcc, test.method="deseq2", FDR=0.1)
}
table(tcc$estimatedDEG)



#######2_RNAlater 샘플 제거
rc_table = data
dim(rc_table)
rc_table2 = subset(data, select=c("hw_H_2nd_12_htseq.count", "hw_H_2nd_16_htseq.count", "hw_H_2nd_2_htseq.count",  "hw_H_2nd_8_htseq.count", 
                                    "hw_H_3rd_14_htseq.count", "hw_H_3rd_16_htseq.count", "hw_H_3rd_17_htseq.count", "hw_H_4th_14_htseq.count",
                                    "hw_H_5th_10_htseq.count", "hw_H_5th_9_htseq.count",  "hw_L_2nd_18_htseq.count", "hw_L_2nd_19_htseq.count",
                                    "hw_L_3rd_20_htseq.count", "hw_L_3rd_4_htseq.count",  "hw_L_3rd_6_htseq.count",  "hw_L_3rd_7_htseq.count", 
                                    "hw_L_3rd_8_htseq.count",  "hw_L_4th_15_htseq.count", "hw_L_4th_17_htseq.count", "hw_L_5th_19_htseq.count"))
colnames(rc_table2) <- c("H_2nd_12_9", "H_2nd_16_9", "H_2nd_2_9",  "H_2nd_8_9", 
                           "H_3rd_14_9", "H_3rd_16_8", "H_3rd_17_9", "H_4th_14_9",
                           "H_5th_10_9", "H_5th_9_9",  "L_2nd_18_4", "L_2nd_19_4",
                           "L_3rd_20_1", "L_3rd_4_2",  "L_3rd_6_3",  "L_3rd_7_3" ,
                           "L_3rd_8_2",  "L_4th_15_3", "L_4th_17_1", "L_5th_19_1")
colnames(rc_table2)  


# initiation & filter low count genes
group <- c(1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2)
tcc <- new("TCC", rc_table2, group)
dim(tcc$count)
tcc
tcc <- filterLowCountGenes(tcc, low.count = 10)
dim(tcc$count)
tcc

# normalization & DEG estimation 
type <- "deseq2"
if (type == "edger"){
  tcc <- calcNormFactors(tcc, norm.method="tmm", test.method="edger",
                         iteration=3, FDR=0.1, floorPDEG=0.05)
  tcc <- estimateDE(tcc, test.method="edger", FDR=0.1)
}else if (type == "deseq2"){
  tcc <- calcNormFactors(tcc, norm.method="deseq2", test.method="deseq2",
                         iteration=3, FDR=0.1, floorPDEG=0.05)
  tcc <- estimateDE(tcc, test.method="deseq2", FDR=0.1)
}
table(tcc$estimatedDEG)


# The getNormalizedData function can be applied to the TCC class object
# after the normalization factors have been calculated
eff_count <- getNormalizedData(tcc)
View(eff_count)

write.csv(round(eff_count, 3), "tmm(영주제외20_low.count20).csv")

# The summary statistics for top-ranked genes
result <- getResult(tcc, sort=TRUE)
dim(result)

# DEG filtering (log2fc가 2이상, -2이하인 유전자만 DEG로 선정하도록 데이터 수정)
result$estimatedDEG[abs(result$m.value) < 2] <- 0
View(result)
table(result$estimatedDEG)

#tsv로 저장
write.table(result, "deg.tsv", sep="\t", quote=F, col.names=T, row.names=F)

#csv로 저장
write.csv(result, "deg(영주제외20_lowcount40).csv")




################################################################################
# Step 2.4 DEG visualization
################################################################################

# MA plot v1
png("deg.ma.png", width=8, height=6, units="in", res=600)
plot(tcc, median.lines = TRUE, cex=0.4)
dev.off()

# MA plot v2
result_deg_up <- result[result$m.value > 2 & result$estimatedDEG > 0,]
dim(result_deg_up)
result_deg_dw <- result[result$m.value < -2 & result$estimatedDEG > 0,]
dim(result_deg_dw)

png("deg.ma_v2.png", width=8, height=6, units="in", res=600)
plot(result$a.value, result$m.value, cex=0.3, ylim=c(-10,10), xlim=c(-3, 15),
     main = "MA plot", xlab = "A value", ylab = "M value")
points(result_deg_up$a.value, result_deg_up$m.value, cex=0.3, col='red')
points(result_deg_dw$a.value, result_deg_dw$m.value, cex=0.3, col='blue')
dev.off()

# Volcano plot
png("deg.volcano.png", width=8, height=6, units="in", res=600)
plot(result$m.value, -log(result$p.value,10), cex=0.3, ylim=c(0,8), xlim=c(-10,10))
points(result_deg_up$m.value, -log(result_deg_up$p.value,10), cex=0.3, col='red')
points(result_deg_dw$m.value, -log(result_deg_dw$p.value,10), cex=0.3, col='blue')
dev.off()

png("deg.volcano2.png", width=8, height=6, units="in", res=600)
plot(result$m.value, -log(result$p.value,10), cex=0.3, ylim=c(0,8), xlim=c(-10,10))
points(result_deg_up$m.value, -log(result_deg_up$p.value,10), cex=0.3, col='red')
points(result_deg_dw$m.value, -log(result_deg_dw$p.value,10), cex=0.3, col='blue')

data$gene_id <- rownames(data)
data$GeneSymbol <- paste(data$gene_id, "(", data$Symbol, ")")
result_anno <- merge(result, data, by = "gene_id", all.x = TRUE)
result_rank <- result_anno[result_anno$rank <= 10,]
text(result_rank$m.value, -log(result_rank$p.value,10), result_rank$GeneSymbol, col = 'mediumpurple4')
dev.off()

result_anno[result_anno$rank <= 10,]

################################################################################
GO, KEGG pathway visualization
################################################################################
install.packages("tidyverse")
library(tidyverse)

getwd()
setwd("E:/이지연 DEG 분석/")

#DAVID 데이터 불러오기
david <- read.table("hanwoo GO(anseong_lowcount10,logfc1.5).txt", header = TRUE, sep = "\t") 
#GO ID와 Term 분리
david <- david %>%
  separate(Term, into = c("GO_ID", "Term"), sep = "~")
colnames(david)
head(david)

# 필요한 라이브러리 로드
library(ggplot2)
library(ggprism)
# 'Category' 열에서 'BP'만 선택
bp_david <- david[david$Category == "GOTERM_BP_DIRECT",]

# 데이터를 'Benjamini' 값이 작은 순서로 정렬
sorted_bp_david <- bp_david[order(bp_david$Benjamini),]

# ggplot2를 사용하여 barplot 생성
GO_BP_plot <- ggplot(sorted_bp_david[1:20, ], aes(x = reorder(Term, Benjamini), y = Count, fill = Benjamini)) +
  geom_bar(stat = "identity") +
  coord_flip() +ylim(0, 100) +
  labs(x = "Term", y = "Gene count", fill = "Adj. p-value") +
  scale_fill_gradient(limits=c(0, 1.0),low = "skyblue", high = "coral") +
  theme_prism(base_size = 10) + ggtitle('Biological Process')+
  theme(legend.title = element_text())

GO_BP_plot

ggsave("GO_BP_logfc1.5.png", dpi=600, dev='png', height=5, width=10, units="in")


# 'Category' 열에서 'MF'만 선택
mf_david <- david[david$Category == "GOTERM_MF_DIRECT",]

# 데이터를 'Benjamini' 값이 작은 순서로 정렬
sorted_mf_david <- mf_david[order(mf_david$Benjamini),]

# ggplot2를 사용하여 barplot 생성
GO_MF_plot <- ggplot(sorted_mf_david[1:20, ], aes(x = reorder(Term, Benjamini), y = Count, fill = Benjamini)) +
  geom_bar(stat = "identity") +
  coord_flip() +ylim(0, 100) +
  labs(x = "Term", y = "Gene count", fill = "Adj. p-value") +
  scale_fill_gradient(limits=c(0, 1.00),low = "skyblue", high = "coral") +
  theme_prism(base_size = 10) + ggtitle('Molecular Function')+
  theme(legend.title = element_text())

GO_MF_plot

ggsave("GO_MF_logfc1.5.png", dpi=600, dev='png', height=5, width=12, units="in")


# 'Category' 열에서 'CC'만 선택
cc_david <- david[david$Category == "GOTERM_CC_DIRECT",]

# 데이터를 'Benjamini' 값이 작은 순서로 정렬
sorted_cc_david <- cc_david[order(cc_david$Benjamini),]

# ggplot2를 사용하여 barplot 생성
GO_CC_plot <- ggplot(sorted_cc_david[1:20, ], aes(x = reorder(Term, Benjamini), y = Count, fill = Benjamini)) +
  geom_bar(stat = "identity") +
  coord_flip() +ylim(0, 100) +
  labs(x = "Term", y = "Gene count", fill = "Adj. p-value") +
  scale_fill_gradient(limits=c(0, 1.00),low = "skyblue", high = "coral") +
  theme_prism(base_size = 10) + ggtitle('Cellular Component')+
  theme(legend.title = element_text())

GO_CC_plot

ggsave("GO_CC_logfc1.5.png", dpi=600, dev='png', height=5, width=7.5, units="in")


####################################################################
###세 catecory를 한 plot에 나타내기

# 'Category' 열에서 'BP', 'MF', 'CC'를 선택하고 'Benjamini' 값이 0.05 미만인 것만 선택
filtered_david <- david[david$Category %in% c("GOTERM_BP_DIRECT", "GOTERM_MF_DIRECT", "GOTERM_CC_DIRECT") & david$Benjamini < 0.05,]

# 'Category'와 'Count'에 따라 정렬
# factor를 이용하여 'Category' 열의 순서를 지정
filtered_david$Category <- factor(filtered_david$Category, levels = c("GOTERM_BP_DIRECT", "GOTERM_CC_DIRECT", "GOTERM_MF_DIRECT"))

# 'Category'의 이름을 변경
levels(filtered_david$Category) <- c("Biological process", "Cellular component", "Molecular function")

sorted_filtered_david <- filtered_david[order(filtered_david$Category, -filtered_david$Count),]

# ggplot2를 사용하여 barplot 생성
GO_plot <- ggplot(sorted_filtered_david, aes(x = reorder(Term, Count), y = Count, fill = Category)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(x = "Term", y = "Gene count", fill = "Category") +
  scale_fill_manual(values = c("Biological process" = "#41a2ab", "Cellular component" = "#48b874", "Molecular function" = "#f59145")) +
  theme_prism(base_size = 10) + ggtitle('GO Terms')+
  theme(legend.title = element_text(), strip.text = element_blank()) + 
  facet_grid(Category ~ ., scales = "free_y", space = "free_y")

GO_plot

ggsave("GO_filtering7.1.png", dpi=600, dev='png', height=5, width=7, units="in")



#############KEGG pathway plot그리기
library(patchwork)
library(tidyverse)
library(ggplot2)
library(ggprism)
#데이터 불러오기 및 다듬기
david2 <- read.table("KEGG_filtering9.txt", header = TRUE, sep = "\t") 
david2 <- david2 %>%
  separate(Term, into = c("KEGG_ID", "Term"), sep = ":")
colnames(david2)
head(david2)


# dplyr 패키지 로드
library(dplyr)

# 데이터를 Fold Enrichment 값에 따라 오름차순으로 정렬
david2 <- david2 %>% arrange(Fold.Enrichment)

# 그래프 그리기
ggplot(david2, aes(x = reorder(Term, Fold.Enrichment), y = Fold.Enrichment)) + 
  geom_point(aes(size = Count, color = PValue)) +
  theme_bw(base_size = 14) + coord_flip() + ylim(0, 6)+
  labs(x = "Term", y = "Fold Enrichment", size = "Count", color = "p-value") +
  scale_colour_gradient(limits=c(0, 0.1), low="#de3131", high = "blue") +
  theme_prism(base_size = 13)+
  ggtitle("KEGG pathway enrichment") +
  theme(plot.title = element_text(size = 18), legend.title = element_text())

# 저장
ggsave("KEGG_filtering9.png", dpi=600, dev='png', height=8, width=10, units="in")


##########top 20개 plot 그리기
# 'Fold.Enrichment'에 따라 정렬하고 상위 20개만 선택
sorted_david2 <- david2[order(-david2$Fold.Enrichment),]
top_david2 <- sorted_david2[1:20,]

#dot plot 그리기
ggplot(top_david2, aes(x = Term, y = Fold.Enrichment)) + 
  geom_point(aes(size = Count, color = PValue)) +
  theme_bw(base_size = 14) + coord_flip() + ylim(0, 6)+
  labs(x = "Term", y = "Fold Enrichment", size = "Count", color = "p-value") +
  scale_colour_gradient(limits=c(0, 0.1), low="#de3131", high = "blue") +
  theme_prism(base_size = 13)+
  ggtitle("Top of 20 pathway enrichment") +
  theme(plot.title = element_text(size = 18), legend.title = element_text())

#저장
ggsave("KEGG_filtering7 top20.png", dpi=600, dev='png', height=7, width=10, units="in")

